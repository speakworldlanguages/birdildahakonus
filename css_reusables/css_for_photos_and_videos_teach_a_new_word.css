main{
  background-image: linear-gradient(#becbd5,#dbe2e8); /* We need this gradient in photo-pair lessons. BUT WE NEED A FLAT COLOR in interactables */
  /* See main in css_for_every_single_html */
  /*Also see css_for_lessons_with_interactables*/
}

/* -- PHOTO PAIRS -- */
.fullViewportFlexPortraitColumnLandscapeRow{ /*This is contained by MAIN*/
  width:100%;
  height: 100%;
  display:flex;  justify-content: center;  align-items: center;
  padding: 4vmin;
}

.oneOfTheTwoDivsThatContainSquarePictures{ /*Not unique objects. So we use a CLASS*/
  background-color: white;
  padding: 10px;
  margin: 5px; /*CAREFUL: Possible problem when centering is not done with a flexbox but with left 50% transform translateX -50%*/
  border-radius: 15px;
  box-shadow: 0 0 15px #55778e;
}

.oneOfTheTwoDivsThatContainSquarePictures img{ /* Handle video too. UPDATE: Animated webps are better than webm files. So won't use video */
  width: 100%; /*This was moved here from css_for_all_iframed_lesson_htmls.css*/
  height: 100%; /*This was moved here from css_for_all_iframed_lesson_htmls.css*/
  object-fit: cover; /*This was moved here from css_for_all_iframed_lesson_htmls.css*/ /*See .resizeTheMicrophoneDependingOnTheDevice img{}*/
  border-radius: 10px;
  position: relative; /*NECESSARY: Use this with top:-100% -200% instead of absolute,,, absolute didn't work to place images correctly on top of each other*/
  /*Reason why absolute didn't work is because these have inherited [display: flex] from their parent but they should have been display: block;*/
  pointer-events: none; /*Disable click drag*/
}

@media (orientation:portrait) {
  .fullViewportFlexPortraitColumnLandscapeRow {
    flex-direction: column;
  }
  .oneOfTheTwoDivsThatContainSquarePictures{
    width: 100%;
    height: 50%;
  }
}

@media (orientation:landscape) {
  .fullViewportFlexPortraitColumnLandscapeRow {
    flex-direction: row;
  }
  .oneOfTheTwoDivsThatContainSquarePictures{
    width: 50%;
    height: 100%;
  }
}

.blurUnblurPauseUnpauseAtMid{  animation-name: blurUnblurAnim;  animation-timing-function: ease;}
@keyframes blurUnblurAnim { 0%{ filter: blur(0vmin); }  40%{ filter: blur(3vmin); } 60%{ filter: blur(3vmin); } 100%{ filter: blur(0vmin); } }
.sepiaUnsepiaPauseUnpauseAtMid{  animation-name: sepiaUnsepiaAnim;  animation-timing-function: ease;} /*In case it turns necessary*/
@keyframes sepiaUnsepiaAnim { 0%{ filter: sepia(0); }  40%{ filter: sepia(0.5); } 60%{ filter: sepia(0.5); } 100%{ filter: sepia(0); } }
.grayscaleUngrayscalePauseUnpauseAtMid{  animation-name: grayscaleUngrayscaleAnim;  animation-timing-function: ease;}
@keyframes grayscaleUngrayscaleAnim { 0%{ filter: grayscale(0); }  40%{ filter: grayscale(0.5); } 60%{ filter: grayscale(0.5); } 100%{ filter: grayscale(0); } }

#containerOfVideosDivID{
  position: fixed;
  left:50%; top:50%;
  transform: translate(-50%, -50%);
  background-color: white;
  border-radius: 10px;
  box-shadow: 0rem 0rem 2rem -2rem hsl(200 50% 20% / 40%), rgba(60, 64, 67, 0.6) 0px 0px 2px 0px, rgba(60, 64, 67, 0.3) 0px 0px 6px 2px;
  /**/
  cursor: url("/user_interface/images/cursor/default_cursor.png") 16 6,auto;
}
#video1, #video2{
  border-radius: 15px;
  border: 10px solid white;
  /*Set width or height inline for each and perhaps set verticals accordingly */
}
/*Changing animationPlayState to "paused" is NOT ACCURATE ENOUGH: Pausing-unpausing in the middle is too unreliable on mobiles*/
.videoAppearsOverPhotos{  animation-name: videoAppearAnim; animation-timing-function: ease; animation-fill-mode: forwards;  }
@keyframes videoAppearAnim {
  0%{   filter: blur(4vmin);  transform: translate(-50%, -50%) scale(.7) ; opacity: 0;}
  100%{  filter: blur(0vmin);   transform: translate(-50%, -50%) scale(1)  ; opacity: 1;}
}
.videoDisappearsOverPhotos{  animation-name: videoDisappearAnim; animation-timing-function: ease; animation-fill-mode: forwards;  }
@keyframes videoDisappearAnim {
  0%{  filter: blur(0vmin);   transform: translate(-50%, -50%) scale(1)  ; opacity: 1;}
  100%{ filter: blur(4vmin);  transform: translate(-50%, -50%) scale(.7) ; opacity: 0; visibility: hidden;}
}

.makePhotosDisappear{  animation-name: fadeToZeroOpacityAndDispNone; animation-timing-function: ease; animation-fill-mode: forwards;  }
@keyframes fadeToZeroOpacityAndDispNone {
  0%{ opacity: 1; }  100%{ opacity: 0; visibility: hidden;} /* display:none; does not work here */
}
.makePhotosAppear{  animation-name: dispBlockAndFadeToFullOpacity; animation-timing-function: ease; animation-fill-mode: forwards;  }
@keyframes dispBlockAndFadeToFullOpacity {
  0%{ opacity: 0; visibility: visible; }  100%{ opacity: 1; } /* display: block; does not work here */
}

#fullVpDarkBlueDivID{
  position: fixed; pointer-events: none;
  left: 0px; top: 0px; width: 100vw; width: 100dvw; height:100%; height:100dvh; /*height used to be 100vh*/
}
.darkenLightenBackground{  animation-name: lightDarkLightAnim;  animation-timing-function: ease; animation-fill-mode: forwards;  }
@keyframes lightDarkLightAnim {
  0%{   background-color: rgba(66,85,102,0);    }
  40%{  background-color: rgba(66,85,102,0.65); }
  60%{  background-color: rgba(66,85,102,0.65); }
  100%{ background-color: rgba(66,85,102,0); }
}


.nowYouSayItImgContainer{
  position: fixed; pointer-events: none;
  width:250px; height:250px; /*Good for both desktops and mobiles*/
  left: 50%; top:50%; margin: 0px; padding: 0px;
  transform: translate(-50%,-50%);
  overflow: hidden;
}
#nowYouSayItImgID{
  pointer-events: none;
  width:250px; /*leave height to auto as webp height will be 250px while avif height will be 2500px*/
  left: 0px; top:0px;
}
.animateAvifSprite{ /*Make the duration a bit less than webp » webp is 5100ms*/
  animation-name: spriteFrames;
  animation-duration: 4.9s;
  animation-fill-mode: forwards;
  animation-timing-function: steps(10,jump-none); /* 10 steps for 2500px long 10 framed sprite » 2500 - 250 = 2250 */
}
@keyframes spriteFrames {
  /* 0%{ margin-top: 0px; } MARGIN TOP IS INACCURATE: Steps are miscalculated » It moves some frames slightly out of position
  100%{ margin-top: -2250px; } */
  0%{ transform: translateY(0px);}
  100%{ transform: translateY(-2250px); }
}

#audioMeterID{
  position: fixed; pointer-events: none;
  width: 86vmin; height: 86vmin;
  left: 50%; top:50%;
  transform: translate(-50%,-50%);
  background-color: rgb(91, 108, 125);
  border-radius: 15px;
  border: 1vmin solid rgb(80, 96, 113);
  /*scale: 1;*/
}
#singlesDivID{
  position: fixed; pointer-events: none;
  width: 86vmin; height: 86vmin; /*Will always be a perfect square so no need for object-fit*/
  left: 50%; top:50%;
  transform: translate(-50%,-50%); /*Not contained by a flexbox container*/
  display:flex;  justify-content: center;  align-items: center; /*But it is a flexbox container itself*/
  background-color: white; /*Same with oneOfTheTwoDivsThatContainSquarePictures*/
  border-radius: 15px; /*Same with oneOfTheTwoDivsThatContainSquarePictures*/
  box-shadow: 0 0 15px #55778e; /*Same with oneOfTheTwoDivsThatContainSquarePictures*/
  /*padding: 10px;*/ /*Same with oneOfTheTwoDivsThatContainSquarePictures*/
}
.positionAbsoluteImg{
  display: block; position: absolute;
  height: 100%; border-radius: 20px;
  border: 10px solid white;
}
.singlesContainerAppears{ animation-name: singlesContainerAppearAnim; animation-duration: 1.5s; animation-timing-function: ease; animation-fill-mode: forwards; }
@keyframes singlesContainerAppearAnim {
  0%{   filter: blur(20px); opacity: 0; }
  100%{ filter: blur(0px);  opacity: 1; }
}
.simpleFadeOut{ animation-name: simpleOutAnim; animation-fill-mode: forwards; }
@keyframes simpleOutAnim { 0%{ visibility: visible; opacity: 1; } 99%{ visibility: visible; opacity: 1; } 100%{ visibility: hidden; opacity: 0; } }
.simpleFadeIn{ animation-name: simpleInAnim; animation-fill-mode: forwards; }
@keyframes simpleInAnim {  0%{ visibility: hidden; opacity: 0; } 50%{ visibility: hidden; opacity: 0.33; } 100%{ visibility: visible; opacity: 1; } }
.brightenUp{ animation-name: brightenAnim; animation-fill-mode: forwards; animation-duration: 0.5s;}
@keyframes brightenAnim {  0%{ filter:brightness(1) contrast(1) drop-shadow(0px 0px 0px white); } 100%{ filter:brightness(1.1) contrast(1.1) drop-shadow(0px 0px 1px white); } }
.darkenDown{ animation-name: darkenAnim; animation-fill-mode: forwards; animation-duration: 2s;}
@keyframes darkenAnim {  0%{ filter:brightness(1) grayscale(0); } 100%{ filter:brightness(0.5) grayscale(0.75); } }



/*---TIDY THIS UP---*/
/*When there is ONE-BIG-PHOTO instead of two photos*/
/*SEPARATE fullViewportFlexPortraitColumnLandscapeRow  AND  oneOfTheTwoDivsThatContainSquarePictures MOVE LONGS TO THAT LESSON'S OWN CSS*/
/*
#idOfTheDivThatContainsOneBigPictureWhichWorksBothInPortraitAndLandscapeModes{
  width:100%;
  height: 100%;
  display:flex;
  justify-content: center;
  align-items: center;
  padding: 0px;
}
.longPictureDivShowWhenInLandscapeHideWhenInPortrait{
  background-color: white;
  padding: 0px;
  margin: 0px;
  border-radius: 0px;
  width: 100%;
  height: 100%;
}
.longPictureDivShowWhenInLandscapeHideWhenInPortrait img{
  width:100%;
  height: 100%;
  border-radius: 0px;
  transition: opacity 1s ease-in-out;
}
.longPictureDivShowWhenInPortraitHideWhenInLandscape{
  background-color: white;
  padding: 0px;
  margin: 0px;
  border-radius: 0px;
  width: 100%;
  height: 100%;
}
.longPictureDivShowWhenInPortraitHideWhenInLandscape img{
  height:100%;
  width: 100%;
  border-radius: 0px;
  transition: opacity 1s ease-in-out;
}

@media screen and (orientation:portrait) {
  .longPictureDivShowWhenInLandscapeHideWhenInPortrait{display: none;}
  .longPictureDivShowWhenInPortraitHideWhenInLandscape{display: initial;}
}

@media screen and (orientation:landscape) {
  .longPictureDivShowWhenInLandscapeHideWhenInPortrait{display: initial;}
  .longPictureDivShowWhenInPortraitHideWhenInLandscape{display: none;}
}
*/
